// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Asserts that the value in C4 is 492
        /// </summary>
        public void AssertC4Value()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals '492'
            Assert.AreEqual(this.AssertC4ValueExpectedValues.UIItemEditText, uIItemEdit.Text, "Value of C4 should be 492");
        }
        
        /// <summary>
        /// Asserts that an error message was displayed
        /// </summary>
        public void AssertErrorMessageDisplayed()
        {
            #region Variable Declarations
            WinText uIToken3UnmatchedoperaText = this.UIUntitledSpreadsheetWindow.UIToolStrip2ToolBar.UIToken3UnmatchedoperaText;
            #endregion

            // Verify that the 'Name' property of 'Token #3: Unmatched operator '*'.' label is not equal to ''
            Assert.AreNotEqual(this.AssertErrorMessageDisplayedExpectedValues.UIToken3UnmatchedoperaTextName, uIToken3UnmatchedoperaText.Name, "Error should contain text");
        }
        
        /// <summary>
        /// Checks that the opened window exists
        /// </summary>
        public void AssertOpenWindowExists()
        {
            #region Variable Declarations
            WinMenuItem uISystemMenuItem = this.UITestSpreadsheetWindow.UISpreadsheetFormMenuBar.UISystemMenuItem;
            #endregion

            // Verify that the 'Exists' property of 'System' menu item equals 'True'
            Assert.AreEqual(this.AssertOpenWindowExistsExpectedValues.UISystemMenuItemExists, uISystemMenuItem.Exists, "Opened Window should exist");
        }
        
        /// <summary>
        /// Asserts that the cellNameTextBox reads D11
        /// </summary>
        public void AssertSelectedCellD11()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIA1Window.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'D11'
            Assert.AreEqual(this.AssertSelectedCellD11ExpectedValues.UIItemEditText, uIItemEdit.Text, "Selected Cell text should be D11");
        }
        
        /// <summary>
        /// Close but cancel the close
        /// </summary>
        public void CloseAndCancel()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UITest2SpreadsheetWindow.UITest2SpreadsheetTitleBar.UICloseButton;
            WinButton uICancelButton = this.UISavechangesWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 6));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(8, 11));
        }
        
        /// <summary>
        /// Close window opened with new using the toolstrip close button.
        /// </summary>
        public void CloseNewNoPromptToolstrip()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UIUntitledSpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(40, 11));
        }
        
        /// <summary>
        /// Close with the x, when there should not be a save prompt
        /// </summary>
        public void CloseNoPrompt1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIUntitledSpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 12));
        }
        
        /// <summary>
        /// Closes an opened window when no changes were made
        /// </summary>
        public void CloseOpenedWindowNoPrompt()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UITestSpreadsheetWindow.UITestSpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 14));
        }
        
        /// <summary>
        /// Close with x, don't save
        /// </summary>
        public void CloseWithoutSaving()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIUntitledSpreadsheetWindow.UIUntitledSpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISavechangesWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(42, 5));
        }
        
        /// <summary>
        /// Launch the Application
        /// </summary>
        public void Launch()
        {

            // Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.LaunchParams.ExePath, this.LaunchParams.AlternateExePath);
        }
        
        /// <summary>
        /// Create new spreadsheet
        /// </summary>
        public void NewSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(22, 7));
        }
        
        /// <summary>
        /// Open and close the help window
        /// </summary>
        public void OpenCloseHelp()
        {
            #region Variable Declarations
            WinMenuItem uIViewHelpMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIViewHelpMenuItem;
            WinButton uICloseButton = this.UIHelpWindow.UIHelpTitleBar.UICloseButton;
            #endregion

            // Click 'Help' -> 'View Help' menu item
            Mouse.Click(uIViewHelpMenuItem, new Point(47, 17));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(25, 8));
        }
        
        /// <summary>
        /// Open Test1
        /// </summary>
        public void OpenSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UIOpenWindow.UIItemWindow11.UIFilenameEdit;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(28, 16));

            // Select 'Test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenSpreadsheetParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.OpenSpreadsheetParams.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Save as Test2
        /// </summary>
        public void SaveAsOverwriting()
        {
            #region Variable Declarations
            WinMenuItem uISaveAsMenuItem = this.UITest2SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow4.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Save As...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(36, 7));

            // Select 'Test2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAsOverwritingParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SaveAsOverwritingParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(51, 13));
        }
        
        /// <summary>
        /// Save first time overwriting
        /// </summary>
        public void SaveFirstTimeOverwriting()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UIUntitledSpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(34, 5));

            // Select 'Test2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveFirstTimeOverwritingParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(35, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 13));
        }
        
        /// <summary>
        /// Saves when there should not be a Save dialog
        /// </summary>
        public void SaveNoPrompt()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UITest2SpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(40, 9));
        }
        
        /// <summary>
        /// Select Cells A1, B1, C1, and D11
        /// </summary>
        public void SelectCells1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 42));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(124, 42));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(208, 38));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(298, 240));
        }
        
        /// <summary>
        /// Sets A1 to =A1
        /// </summary>
        public void SetA1CircularDependency()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Type '=A1' in text box
            uIItemEdit.Text = this.SetA1CircularDependencyParams.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SetA1CircularDependencyParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Set A1 to =2*
        /// </summary>
        public void SetA1InvalidFormula1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(64, 38));

            // Type '=2*' in text box
            uIItemEdit.Text = this.SetA1InvalidFormula1Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SetA1InvalidFormula1Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Sets A1 to 123
        /// </summary>
        public void SetA1Number1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 44));

            // Type '123' in text box
            uIItemEdit.Text = this.SetA1Number1Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SetA1Number1Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Sets B1 to hello, then selects C1
        /// </summary>
        public void SetB1StringSelect1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(120, 40));

            // Type 'hello' in text box
            uIItemEdit.Text = this.SetB1StringSelect1Params.UIItemEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(200, 46));
        }
        
        /// <summary>
        /// Sets C1 to =2+2
        /// </summary>
        public void SetC1Formula1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Type '=2+2' in text box
            uIItemEdit.Text = this.SetC1Formula1Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SetC1Formula1Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Sets C4 to =A1*C1
        /// </summary>
        public void SetC4Formula1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIUntitledSpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UIUntitledSpreadsheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(232, 102));

            // Type '=A1*C1' in text box
            uIItemEdit.Text = this.SetC4Formula1Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SetC4Formula1Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Close and save no dialog prompt
        /// </summary>
        public void CloseAndSave()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UITestSpreadsheetWindow1.UITestSpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UISavechangesWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 15));
        }
        
        #region Properties
        public virtual AssertC4ValueExpectedValues AssertC4ValueExpectedValues
        {
            get
            {
                if ((this.mAssertC4ValueExpectedValues == null))
                {
                    this.mAssertC4ValueExpectedValues = new AssertC4ValueExpectedValues();
                }
                return this.mAssertC4ValueExpectedValues;
            }
        }
        
        public virtual AssertErrorMessageDisplayedExpectedValues AssertErrorMessageDisplayedExpectedValues
        {
            get
            {
                if ((this.mAssertErrorMessageDisplayedExpectedValues == null))
                {
                    this.mAssertErrorMessageDisplayedExpectedValues = new AssertErrorMessageDisplayedExpectedValues();
                }
                return this.mAssertErrorMessageDisplayedExpectedValues;
            }
        }
        
        public virtual AssertOpenWindowExistsExpectedValues AssertOpenWindowExistsExpectedValues
        {
            get
            {
                if ((this.mAssertOpenWindowExistsExpectedValues == null))
                {
                    this.mAssertOpenWindowExistsExpectedValues = new AssertOpenWindowExistsExpectedValues();
                }
                return this.mAssertOpenWindowExistsExpectedValues;
            }
        }
        
        public virtual AssertSelectedCellD11ExpectedValues AssertSelectedCellD11ExpectedValues
        {
            get
            {
                if ((this.mAssertSelectedCellD11ExpectedValues == null))
                {
                    this.mAssertSelectedCellD11ExpectedValues = new AssertSelectedCellD11ExpectedValues();
                }
                return this.mAssertSelectedCellD11ExpectedValues;
            }
        }
        
        public virtual LaunchParams LaunchParams
        {
            get
            {
                if ((this.mLaunchParams == null))
                {
                    this.mLaunchParams = new LaunchParams();
                }
                return this.mLaunchParams;
            }
        }
        
        public virtual OpenSpreadsheetParams OpenSpreadsheetParams
        {
            get
            {
                if ((this.mOpenSpreadsheetParams == null))
                {
                    this.mOpenSpreadsheetParams = new OpenSpreadsheetParams();
                }
                return this.mOpenSpreadsheetParams;
            }
        }
        
        public virtual SaveAsOverwritingParams SaveAsOverwritingParams
        {
            get
            {
                if ((this.mSaveAsOverwritingParams == null))
                {
                    this.mSaveAsOverwritingParams = new SaveAsOverwritingParams();
                }
                return this.mSaveAsOverwritingParams;
            }
        }
        
        public virtual SaveFirstTimeOverwritingParams SaveFirstTimeOverwritingParams
        {
            get
            {
                if ((this.mSaveFirstTimeOverwritingParams == null))
                {
                    this.mSaveFirstTimeOverwritingParams = new SaveFirstTimeOverwritingParams();
                }
                return this.mSaveFirstTimeOverwritingParams;
            }
        }
        
        public virtual SetA1CircularDependencyParams SetA1CircularDependencyParams
        {
            get
            {
                if ((this.mSetA1CircularDependencyParams == null))
                {
                    this.mSetA1CircularDependencyParams = new SetA1CircularDependencyParams();
                }
                return this.mSetA1CircularDependencyParams;
            }
        }
        
        public virtual SetA1InvalidFormula1Params SetA1InvalidFormula1Params
        {
            get
            {
                if ((this.mSetA1InvalidFormula1Params == null))
                {
                    this.mSetA1InvalidFormula1Params = new SetA1InvalidFormula1Params();
                }
                return this.mSetA1InvalidFormula1Params;
            }
        }
        
        public virtual SetA1Number1Params SetA1Number1Params
        {
            get
            {
                if ((this.mSetA1Number1Params == null))
                {
                    this.mSetA1Number1Params = new SetA1Number1Params();
                }
                return this.mSetA1Number1Params;
            }
        }
        
        public virtual SetB1StringSelect1Params SetB1StringSelect1Params
        {
            get
            {
                if ((this.mSetB1StringSelect1Params == null))
                {
                    this.mSetB1StringSelect1Params = new SetB1StringSelect1Params();
                }
                return this.mSetB1StringSelect1Params;
            }
        }
        
        public virtual SetC1Formula1Params SetC1Formula1Params
        {
            get
            {
                if ((this.mSetC1Formula1Params == null))
                {
                    this.mSetC1Formula1Params = new SetC1Formula1Params();
                }
                return this.mSetC1Formula1Params;
            }
        }
        
        public virtual SetC4Formula1Params SetC4Formula1Params
        {
            get
            {
                if ((this.mSetC4Formula1Params == null))
                {
                    this.mSetC4Formula1Params = new SetC4Formula1Params();
                }
                return this.mSetC4Formula1Params;
            }
        }
        
        public UISpreadsheetuntitledWindow UISpreadsheetuntitledWindow
        {
            get
            {
                if ((this.mUISpreadsheetuntitledWindow == null))
                {
                    this.mUISpreadsheetuntitledWindow = new UISpreadsheetuntitledWindow();
                }
                return this.mUISpreadsheetuntitledWindow;
            }
        }
        
        public UISavechangesWindow UISavechangesWindow
        {
            get
            {
                if ((this.mUISavechangesWindow == null))
                {
                    this.mUISavechangesWindow = new UISavechangesWindow();
                }
                return this.mUISavechangesWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISpreadsheetTestWindow UISpreadsheetTestWindow
        {
            get
            {
                if ((this.mUISpreadsheetTestWindow == null))
                {
                    this.mUISpreadsheetTestWindow = new UISpreadsheetTestWindow();
                }
                return this.mUISpreadsheetTestWindow;
            }
        }
        
        public UIUntitledSpreadsheetWindow UIUntitledSpreadsheetWindow
        {
            get
            {
                if ((this.mUIUntitledSpreadsheetWindow == null))
                {
                    this.mUIUntitledSpreadsheetWindow = new UIUntitledSpreadsheetWindow();
                }
                return this.mUIUntitledSpreadsheetWindow;
            }
        }
        
        public UITest2SpreadsheetWindow UITest2SpreadsheetWindow
        {
            get
            {
                if ((this.mUITest2SpreadsheetWindow == null))
                {
                    this.mUITest2SpreadsheetWindow = new UITest2SpreadsheetWindow();
                }
                return this.mUITest2SpreadsheetWindow;
            }
        }
        
        public UITestSpreadsheetWindow UITestSpreadsheetWindow
        {
            get
            {
                if ((this.mUITestSpreadsheetWindow == null))
                {
                    this.mUITestSpreadsheetWindow = new UITestSpreadsheetWindow();
                }
                return this.mUITestSpreadsheetWindow;
            }
        }
        
        public UIUntitledSpreadsheetWindow1 UIUntitledSpreadsheetWindow1
        {
            get
            {
                if ((this.mUIUntitledSpreadsheetWindow1 == null))
                {
                    this.mUIUntitledSpreadsheetWindow1 = new UIUntitledSpreadsheetWindow1();
                }
                return this.mUIUntitledSpreadsheetWindow1;
            }
        }
        
        public UITestSpreadsheetWindow1 UITestSpreadsheetWindow1
        {
            get
            {
                if ((this.mUITestSpreadsheetWindow1 == null))
                {
                    this.mUITestSpreadsheetWindow1 = new UITestSpreadsheetWindow1();
                }
                return this.mUITestSpreadsheetWindow1;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertC4ValueExpectedValues mAssertC4ValueExpectedValues;
        
        private AssertErrorMessageDisplayedExpectedValues mAssertErrorMessageDisplayedExpectedValues;
        
        private AssertOpenWindowExistsExpectedValues mAssertOpenWindowExistsExpectedValues;
        
        private AssertSelectedCellD11ExpectedValues mAssertSelectedCellD11ExpectedValues;
        
        private LaunchParams mLaunchParams;
        
        private OpenSpreadsheetParams mOpenSpreadsheetParams;
        
        private SaveAsOverwritingParams mSaveAsOverwritingParams;
        
        private SaveFirstTimeOverwritingParams mSaveFirstTimeOverwritingParams;
        
        private SetA1CircularDependencyParams mSetA1CircularDependencyParams;
        
        private SetA1InvalidFormula1Params mSetA1InvalidFormula1Params;
        
        private SetA1Number1Params mSetA1Number1Params;
        
        private SetB1StringSelect1Params mSetB1StringSelect1Params;
        
        private SetC1Formula1Params mSetC1Formula1Params;
        
        private SetC4Formula1Params mSetC4Formula1Params;
        
        private UISpreadsheetuntitledWindow mUISpreadsheetuntitledWindow;
        
        private UISavechangesWindow mUISavechangesWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISpreadsheetTestWindow mUISpreadsheetTestWindow;
        
        private UIUntitledSpreadsheetWindow mUIUntitledSpreadsheetWindow;
        
        private UITest2SpreadsheetWindow mUITest2SpreadsheetWindow;
        
        private UITestSpreadsheetWindow mUITestSpreadsheetWindow;
        
        private UIUntitledSpreadsheetWindow1 mUIUntitledSpreadsheetWindow1;
        
        private UITestSpreadsheetWindow1 mUITestSpreadsheetWindow1;
        
        private UIHelpWindow mUIHelpWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertC4Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertC4ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals '492'
        /// </summary>
        public string UIItemEditText = "492";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertErrorMessageDisplayed'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertErrorMessageDisplayedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Token #3: Unmatched operator '*'.' label is not equal to ''
        /// </summary>
        public string UIToken3UnmatchedoperaTextName = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpenWindowExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertOpenWindowExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'System' menu item equals 'True'
        /// </summary>
        public bool UISystemMenuItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSelectedCellD11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertSelectedCellD11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'D11'
        /// </summary>
        public string UIItemEditText = "D11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Launch'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class LaunchParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OpenSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Test";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAsOverwriting'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveAsOverwritingParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Test2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Test2";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveFirstTimeOverwriting'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveFirstTimeOverwritingParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Test2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Test2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetA1CircularDependency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetA1CircularDependencyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1' in text box
        /// </summary>
        public string UIItemEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetA1InvalidFormula1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetA1InvalidFormula1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=2*' in text box
        /// </summary>
        public string UIItemEditText = "=2*";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetA1Number1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetA1Number1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '123' in text box
        /// </summary>
        public string UIItemEditText = "123";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetB1StringSelect1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetB1StringSelect1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'hello' in text box
        /// </summary>
        public string UIItemEditText = "hello";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetC1Formula1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetC1Formula1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=2+2' in text box
        /// </summary>
        public string UIItemEditText = "=2+2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetC4Formula1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SetC4Formula1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1*C1' in text box
        /// </summary>
        public string UIItemEditText = "=A1*C1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetuntitledWindow : WinWindow
    {
        
        public UISpreadsheetuntitledWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISpreadsheetuntitledTitleBar UISpreadsheetuntitledTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetuntitledTitleBar == null))
                {
                    this.mUISpreadsheetuntitledTitleBar = new UISpreadsheetuntitledTitleBar(this);
                }
                return this.mUISpreadsheetuntitledTitleBar;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UISpreadsheetuntitledTitleBar mUISpreadsheetuntitledTitleBar;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetuntitledTitleBar : WinTitleBar
    {
        
        public UISpreadsheetuntitledTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As...";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("Spreadsheet - untitled");
            #endregion
        }
        
        #region Properties
        public WinText UIToken3UnmatchedoperaText
        {
            get
            {
                if ((this.mUIToken3UnmatchedoperaText == null))
                {
                    this.mUIToken3UnmatchedoperaText = new WinText(this);
                    #region Search Criteria
                    this.mUIToken3UnmatchedoperaText.SearchProperties[WinText.PropertyNames.ControlName] = "errorText";
                    this.mUIToken3UnmatchedoperaText.WindowTitles.Add("Spreadsheet - untitled");
                    #endregion
                }
                return this.mUIToken3UnmatchedoperaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIToken3UnmatchedoperaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISavechangesWindow : WinWindow
    {
        
        public UISavechangesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save changes?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save changes?");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Save changes?");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Save changes?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Save changes?");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Save changes?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save changes?");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save changes?");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow31 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow31(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIItemWindow31 mUIItemWindow3;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow4 mUIItemWindow4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIVisualStudio2013ListItem UIVisualStudio2013ListItem
        {
            get
            {
                if ((this.mUIVisualStudio2013ListItem == null))
                {
                    this.mUIVisualStudio2013ListItem = new UIVisualStudio2013ListItem(this);
                }
                return this.mUIVisualStudio2013ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIVisualStudio2013ListItem mUIVisualStudio2013ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIVisualStudio2013ListItem : WinListItem
    {
        
        public UIVisualStudio2013ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Visual Studio 2013";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIProjectsListItem UIProjectsListItem
        {
            get
            {
                if ((this.mUIProjectsListItem == null))
                {
                    this.mUIProjectsListItem = new UIProjectsListItem(this);
                }
                return this.mUIProjectsListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIProjectsListItem mUIProjectsListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIProjectsListItem : WinListItem
    {
        
        public UIProjectsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Projects";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIPS6ListItem UIPS6ListItem
        {
            get
            {
                if ((this.mUIPS6ListItem == null))
                {
                    this.mUIPS6ListItem = new UIPS6ListItem(this);
                }
                return this.mUIPS6ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPS6ListItem mUIPS6ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPS6ListItem : WinListItem
    {
        
        public UIPS6ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "PS6";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow31 : WinWindow
    {
        
        public UIItemWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUITestListItem UISpreadsheetGUITestListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUITestListItem == null))
                {
                    this.mUISpreadsheetGUITestListItem = new UISpreadsheetGUITestListItem(this);
                }
                return this.mUISpreadsheetGUITestListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUITestListItem mUISpreadsheetGUITestListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetGUITestListItem : WinListItem
    {
        
        public UISpreadsheetGUITestListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUITest";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestsprdListItem UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new UITestsprdListItem(this);
                }
                return this.mUITestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestsprdListItem mUITestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestsprdListItem : WinListItem
    {
        
        public UITestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetTestWindow : WinWindow
    {
        
        public UISpreadsheetTestWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - Test";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - Test");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetTestTitleBar UISpreadsheetTestTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTestTitleBar == null))
                {
                    this.mUISpreadsheetTestTitleBar = new UISpreadsheetTestTitleBar(this);
                }
                return this.mUISpreadsheetTestTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetTestTitleBar mUISpreadsheetTestTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetTestTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTestTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - Test");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - Test");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUntitledSpreadsheetWindow : WinWindow
    {
        
        public UIUntitledSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "untitled - Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIUntitledSpreadsheetTitleBar UIUntitledSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUIUntitledSpreadsheetTitleBar == null))
                {
                    this.mUIUntitledSpreadsheetTitleBar = new UIUntitledSpreadsheetTitleBar(this);
                }
                return this.mUIUntitledSpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow22 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow22(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIToolStrip2ToolBar UIToolStrip2ToolBar
        {
            get
            {
                if ((this.mUIToolStrip2ToolBar == null))
                {
                    this.mUIToolStrip2ToolBar = new UIToolStrip2ToolBar(this);
                }
                return this.mUIToolStrip2ToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIUntitledSpreadsheetTitleBar mUIUntitledSpreadsheetTitleBar;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UIItemWindow22 mUIItemWindow2;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIToolStrip2ToolBar mUIToolStrip2ToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUntitledSpreadsheetTitleBar : WinTitleBar
    {
        
        public UIUntitledSpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow22 : WinWindow
    {
        
        public UIItemWindow22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIViewHelpMenuItem
        {
            get
            {
                if ((this.mUIViewHelpMenuItem == null))
                {
                    this.mUIViewHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIViewHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "View Help";
                    this.mUIViewHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIViewHelpMenuItem.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUIViewHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIViewHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIToolStrip2ToolBar : WinToolBar
    {
        
        public UIToolStrip2ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip2";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinText UIToken3UnmatchedoperaText
        {
            get
            {
                if ((this.mUIToken3UnmatchedoperaText == null))
                {
                    this.mUIToken3UnmatchedoperaText = new WinText(this);
                    #region Search Criteria
                    this.mUIToken3UnmatchedoperaText.SearchProperties[WinText.PropertyNames.Name] = "Token #3: Unmatched operator \'*\'.";
                    this.mUIToken3UnmatchedoperaText.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUIToken3UnmatchedoperaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIToken3UnmatchedoperaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITest2SpreadsheetWindow : WinWindow
    {
        
        public UITest2SpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test2 - Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Test2 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UITest2SpreadsheetTitleBar UITest2SpreadsheetTitleBar
        {
            get
            {
                if ((this.mUITest2SpreadsheetTitleBar == null))
                {
                    this.mUITest2SpreadsheetTitleBar = new UITest2SpreadsheetTitleBar(this);
                }
                return this.mUITest2SpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UITest2SpreadsheetTitleBar mUITest2SpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Test2 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Test2 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Test2 - Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As...";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Test2 - Spreadsheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Test2 - Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip1";
            this.WindowTitles.Add("Test2 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStrip1MenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStrip1MenuBar.WindowTitles.Add("Test2 - Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITest2SpreadsheetTitleBar : WinTitleBar
    {
        
        public UITest2SpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Test2 - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Test2 - Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestSpreadsheetWindow : WinWindow
    {
        
        public UITestSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test- Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Test- Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetFormMenuBar UISpreadsheetFormMenuBar
        {
            get
            {
                if ((this.mUISpreadsheetFormMenuBar == null))
                {
                    this.mUISpreadsheetFormMenuBar = new UISpreadsheetFormMenuBar(this);
                }
                return this.mUISpreadsheetFormMenuBar;
            }
        }
        
        public UITestSpreadsheetTitleBar UITestSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUITestSpreadsheetTitleBar == null))
                {
                    this.mUITestSpreadsheetTitleBar = new UITestSpreadsheetTitleBar(this);
                }
                return this.mUITestSpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetFormMenuBar mUISpreadsheetFormMenuBar;
        
        private UITestSpreadsheetTitleBar mUITestSpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISpreadsheetFormMenuBar : WinMenuBar
    {
        
        public UISpreadsheetFormMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "System";
            this.WindowTitles.Add("Test- Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISystemMenuItem
        {
            get
            {
                if ((this.mUISystemMenuItem == null))
                {
                    this.mUISystemMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISystemMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "System";
                    this.mUISystemMenuItem.WindowTitles.Add("Test- Spreadsheet");
                    #endregion
                }
                return this.mUISystemMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISystemMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestSpreadsheetTitleBar : WinTitleBar
    {
        
        public UITestSpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Test- Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Test- Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIUntitledSpreadsheetWindow1 : WinWindow
    {
        
        public UIUntitledSpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "untitled - Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem3 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem3(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem3 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem3 : WinMenuItem
    {
        
        public UIFileMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("untitled - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("untitled - Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestSpreadsheetWindow1 : WinWindow
    {
        
        public UITestSpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test - Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Test - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITestSpreadsheetTitleBar1 UITestSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUITestSpreadsheetTitleBar == null))
                {
                    this.mUITestSpreadsheetTitleBar = new UITestSpreadsheetTitleBar1(this);
                }
                return this.mUITestSpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UITestSpreadsheetTitleBar1 mUITestSpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITestSpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UITestSpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Test - Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Test - Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIHelpTitleBar UIHelpTitleBar
        {
            get
            {
                if ((this.mUIHelpTitleBar == null))
                {
                    this.mUIHelpTitleBar = new UIHelpTitleBar(this);
                }
                return this.mUIHelpTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpTitleBar mUIHelpTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpTitleBar : WinTitleBar
    {
        
        public UIHelpTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
